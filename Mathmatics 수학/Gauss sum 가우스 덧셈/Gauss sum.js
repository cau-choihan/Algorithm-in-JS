//연속된 자연수들이 있다면 효율적으로 자연수들의 합을 구할 수 있는 프로그램
//1부터 n까지의 합을 구하는 경우 : n(n+1)/2
const n = 10000;
let sum = 0;
for (let i = 1; i <= n; i++) {
    sum += i;
}
console.log(`${sum} == ${n * (n + 1) / 2}`)
//다음과 같이 시간복잡도를 O(n) -> O(1)로 줄일 수 있음

//1보다 큰 자연수 a와 a<b를 만족하는 자연수 b까지의 합을 구하는 경우
const a = 100;
const b = 10000;
sum = 0;
for (let i = a; i <= b; i++) {
    sum += i;
}
console.log(`${sum} == ${b * (b + 1) / 2 - a * (a - 1) / 2}`)
//위의 경우 a~b의 합을 구하기 위해선 1~ a-1 까지의 합을 차감해야함
//때문에 a*(a-1)/2 의 형태가 되었음.
//식을 정리하면 ((b^2-a^2)+(b+a))/2로도 표현 가능함.
//또는 (b+a)(b-a+1)/2로 가능
console.log(`${((b ** 2) - (a ** 2) + (a + b)) / 2} , ${(b + a) * (b - a + 1) / 2}`)